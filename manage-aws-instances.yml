---
- name: Start instances
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
  - debug:
      msg: "Region={{ hostvars[item].region }} InstanceID={{ hostvars[item].instance_id }} vpc_subnet={{ hostvars[item].vpc_subnet }} Instance Tag Name={{ hostvars[item].instance_tag }} "
    with_items: "{{ groups.ec2 }}"
    when:
      - ( hostvars[item].instance_id is defined and hostvars[item].instance_id != "" )
    tags:
      - start-instance
      - never

  - name: Starting the instances
    ec2:
      instance_ids: "{{ hostvars[item].instance_id }}"
      instance_tags:
        Name: "{{ hostvars[item].instance_tag }}"
      region: "{{ hostvars[item].region }}"
      state: running
      wait: True
      vpc_subnet_id: "{{ hostvars[item].vpc_subnet }}"
      assign_public_ip: no
    with_items: "{{ groups.ec2 }}"
    when:
      - ( hostvars[item].instance_id is defined and hostvars[item].instance_id != "" )
    tags:
      - start-instance
      - never

  - name: Wait for ssh to come up
    wait_for: host="{{ hostvars[item].ansible_host }}" port=22 delay=10  timeout=300
    register: poll_results
    with_items: "{{ groups.ec2 }}"
    when:
      - ( hostvars[item].instance_id is defined and hostvars[item].instance_id != "" )
    tags:
      - start-instance
      - never

- name: Stop instances
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
  - debug:
      msg: "Region={{ hostvars[item].region }} InstanceID={{ hostvars[item].instance_id }} vpc_subnet={{ hostvars[item].vpc_subnet }} Instance Tag Name={{ hostvars[item].instance_tag }} "
    with_items: "{{ groups.ec2 }}"
    when:
      - ( hostvars[item].instance_id is defined and hostvars[item].instance_id != "" )
    tags:
      - stop-instance
      - never
  - name: Stopping the instances
    ec2:
      instance_ids: "{{ hostvars[item].instance_id }}"
      instance_tags:
        Name: "{{ hostvars[item].instance_tag }}"
      region: "{{ hostvars[item].region }}"
      state: stopped
      wait: True
      vpc_subnet_id: "{{ hostvars[item].vpc_subnet }}"
      assign_public_ip: no
    with_items: "{{ groups.ec2 }}"
    when:
      - ( hostvars[item].instance_id is defined and hostvars[item].instance_id != "" )
    tags:
      - stop-instance
      - never
